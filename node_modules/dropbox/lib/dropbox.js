/*
*   Module Dependancies
*/
var querystring     = require('querystring'),
    fs              = require('fs'),
    nodePath        = require('path'),
    util            = require('util'),
    _               = require('underscore'),
    OAuth           = require('oauth').OAuth,
    API_URI         = 'https://api.dropbox.com/1',
    CONTENT_API_URI = 'https://api-content.dropbox.com/1',
    EOL             = "\r\n",
    toString        = {}.toString,
    OAuthCallback   = function( callback ) {
        return function( err, data, res ) {
            if ( err ) {
                console.log( err );
            }
            callback( err, data );
        };
    };

querystring.escape = function( p ) {
    return p.replace(/([!|\:|\*|'|\(|\)|;|@|&|=|\+|\$|,|\?|#|\[|\]|~|\%|\s])/gi, function( char ) {
        return '%' + char.charCodeAt(0).toString(16).toUpperCase();
    });
};


// Dropbox constructor
var Dropbox = function( options ) {

    this.consumerKey        = options.consumerKey;
    this.consumerSecret     = options.consumerSecret;
    this.requestToken       = options.requestToken;
    this.requestTokenSecret = options.requestTokenSecret;
    this.accessToken        = options.accessToken;
    this.accessTokenSecret  = options.accessTokenSecret;
    this.boxType            = options.sandbox ? 'sandbox' : 'dropbox';
    this.OAuth              = new OAuth(
    	API_URI + '/oauth/request_token',
        API_URI + '/oauth/access_token',
        this.consumerKey,
        this.consumerSecret, 
        '1.0',
        null,
        'HMAC-SHA1'
    );
}

_.extend( Dropbox, {
    generateBoundary : function() {
        return ( Math.random() * 1e60 ).toString(36);
    }
});

_.extend( Dropbox.prototype, {

    _OAuthPost : function( uri, body, contentType, params, callback ) {

        // Normalize parameters
        if ( _.isFunction( params )) { 
            callback = params;
            params = {};
        }

        this.OAuth.post(uri, this.accessToken, this.accessTokenSecret, body, contentType, OAuthCallback( callback ));
    },

    _OAuthGet : function( uri, params, callback ) {

        if ( _.isFunction( params )) { 
            callback = params;
            params = {};
        }
        this.OAuth.get(uri /*+ "?" + querystring.stringify(params)*/, this.accessToken, this.accessTokenSecret, callback);
    },

    _encodePath: function(path) {
    	_({
			' ': '%20'
    	}).each(function(replace, search) {
    		path = path.replace(new RegExp(search, 'g'), replace);
    	});
    	return path;

        return dir.split("/").map( OAuth.percentEncode ).join("/");
    },

	getRequestToken: function(cb) {
		var self = this;
		
		this.OAuth.getOAuthRequestToken(function(err, requestToken, requestTokenSecret, results) {
			if (!err) {
				self.requestToken = requestToken;
				self.requestTokenSecret = requestTokenSecret;
			}
			cb(err, requestToken, requestTokenSecret);
		});
	},

    getAccessToken: function(cb) {
        var self = this;

		this.OAuth.getOAuthAccessToken(this.requestToken, this.requestTokenSecret, function(err, accessToken, accessTokenSecret, results) {
            if (!err) {
                self.accessToken = accessToken;
                self.accessTokenSecret = accessTokenSecret;
            }
            cb(err, self.accessToken, self.accessTokenSecret, results);
        });
    },


    // Retrieves information about the user's account as a JSON response.
    getAccountInfo : function( params, callback ) {
        this._OAuthGet(API_URI + '/account/info', params, callback);
    },


    // Create a new Dropbox account.
    /* {
        email: email
        , first_name: first_name
        , last_name: last_name
        , password: password
        , status_in_response: optargs.status_in_response
      }
    */
    createAccount : function( params, callback ) {
        this._OAuthGet( API_URI + '/account', params, callback );
    },

    // Retrieves contents of a file specified by path argument, relative to
    // user's Dropbox root.
    getFile : function( path, params, callback ) {
        this._OAuthGet(CONTENT_API_URI + '/files/' + this.boxType + this._encodePath(path), params, callback);
    },

    putBuffer : function( data, path, params, callback ) {


        var boundary    = Dropbox.generateBoundary(),
            contentType = 'multipart/form-data; boundary=' + boundary,
            filename    = path.split("/").pop(),
            dir         = path.split("/").slice(0, -1).join("/"),
            body        = [
                '--' + boundary, 
                'Content-Disposition: form-data; name=file; filename=' + OAuth.encodeUTF8( filename ),
                'Content-Type: application/octet-stream', 
                '', 
                ( Buffer.isBuffer( data ) ? data : (new Buffer( data ))).toString('binary'),
                '--' + boundary + '--',
                ''
            ].join('\r\n');

 
            if ( _.isFunction( params ) ) {
                callback = params;
                params = {};
            }

            params = params ||  {};
            if ( _.isObject( params )) {
                _.extend( params, {
                    file : filename
                });
            }

            this._OAuthPost( [ CONTENT_API_URI, 'files', this.boxType, this._encodePath( dir ) ].join("/"), body, contentType, params, callback );
 
    },

    putFile : function(path, contents, contentType, cb) {
		this.OAuth.post(CONTENT_API_URI + '/files_put/' + this.boxType + this._encodePath(path), this.accessToken, this.accessTokenSecret, contents, contentType, cb);
    },

    // Gets metadata of file/folder specified by path relative to user's
    // Dropbox root.
    getMetadata: function(path, params, callback) {
        this._OAuthGet(API_URI + '/metadata' + '/' + this.boxType + this._encodePath(path), params, callback);
    },


    // Downloads a minimized jpeg thumbnail for a photo. See
    // https://www.dropbox.com/developers/docs#thumbnails for a list of
    // valid size specifiers.
    getThumbnail : function( path, params, callback ) {
        this._OAuthGet( [ CONTENT_API_URI, 'thumbnails/dropbox', path ].join("/"), params, callback );
    },


    // Copies a file or folder to a new location.
    // See https://www.dropbox.com/developers/docs#fileops-copy for explanation
    // of arguments.
    copy : function( from, to, params, callback ) {
        this._OAuthGet( API_URI + '/fileops/copy', {
            root: this.boxType, 
            from_path: from, 
            to_path: to
        }, callback );

    },


    // Creates a folder relative to the user's Dropbox root.
    // See https://www.dropbox.com/developers/docs#fileops-create-folder
    // for explanation of arguments.
    createFolder : function( path, params, callback ) {
        this._OAuthGet( API_URI + '/fileops/create_folder', _.extend(params, {
            root: this.boxType, 
            path: path
        }), callback )
    },


    // Deletes a file or folder.
    // See https://www.dropbox.com/developers/docs#fileops-delete for
    // explanation of arguments.
    deleteItem : function( path, params, callback ) {
        this._OAuthGet( API_URI + '/fileops/delete', {
            root: this.boxType,
            path: path
        }, callback );
    },


    // Moves a file or folder.
    // See https://www.dropbox.com/developers/docs#fileops-move for
    // explanation of arguments.
    move : function( from, to, params, callback ) {
        this._OAuthGet( API_URI + '/fileops/move', {
            root: this.boxType,
            from_path: from,
            to_path: to_path
        }, callback );
    }
});

// Expose the module
module.exports = Dropbox;
